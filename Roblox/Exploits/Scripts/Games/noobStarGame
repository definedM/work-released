

-- game link: https://www.roblox.com/games/8781849572/DogpoopStargame

--[[ sample inputs for getgenv().Targets, remove the others when executing
	getgenv().Targets = "All"
	getgenv().Targets = {"someRandomKid_121", LP.Name, "insertValidUsername"}
	getgenv().Targets = {LP.Name}
	
	getgenv().Performance = true --true makes it hide trees/ores, false doesnt hide them
	loadstring(game:HttpGet("https://github.com/definedM/wrk-relesd/blob/main/Roblox/Exploits/Scripts/Games/noobStarGame", true))()
]]

getgenv().Targets = "All"--getgenv().Targets or {LP.Name}
getgenv().Performace = getgenv().Performance or true --false 

local RepStorage = game:GetService("ReplicatedStorage")
local LP = game.Players.LocalPlayer
local myStar = workspace:WaitForChild("Star_"..LP.Name, 10)
myStar = myStar.Player

local function fill(unlockName, material, amount)
	RepStorage.PlayerData.Unlocker.UseMoney:FireServer(unlockName, material, amount)
end

local function FillUnlocker(Obj)
	if not Obj:IsA("Model") then return end
	warn(Obj.Name, "is being filled")
	coroutine.wrap(function()
		local part = Obj:FindFirstChildOfClass("Part")
		if not part then
			task.wait(1)
			part = Obj:FindFirstChildOfClass("Part")
			if not part then return end
		end
		
		local Data = part.SurfaceGui.SurfaceGui.Frame--.F1
		local frame = Data:FindFirstChildOfClass("Frame")
	
		if not frame or frame.Name == "F1" then warn("unable to fill"..Obj.Name)return end	--not gonna do it for special unlockers
		
		for _, mat in pairs(Data:GetChildren()) do
			if mat:IsA("Frame") then
				local maxVal = mat.MaxNumber.Value
				mat:WaitForChild("Number")
				
				repeat
					local amount = maxVal - tonumber(mat.Number.Text)
					local Tab = {Obj.Name, mat.Name, amount}
					fill(table.unpack(Tab))
					task.wait(1)
					warn(amount, "of", mat.Name, " has been filled for", Obj.Name, ". Args are:", table.unpack(Tab))
				until not mat or not mat:FindFirstChild("Number") or tonumber(mat.Number) == maxVal
				RepStorage.PlayerData.Unlocker.LandShow:FireServer(myStar.Land["Land_"..Obj.Name:split("_")[2]])
				warn(Obj.Name, "is now filled")
			end
		end
		return
	end)()
	return
end

local function brekthing(item, tool)
	RepStorage.Attack.UpdateHPEvent:FireServer(item, tool)
end

local function RobResource(Parent, Tab, ToolName)
	for _, item in pairs(Tab) do
		coroutine.wrap(function()
			if getgenv().Performance == true then
				for _, State in pairs(item:GetChildren()) do
					if string.find(State.Name, "State") and State:IsA("Model") then 
						State:Destroy()
					end
				end
			end
			local HP = item.HP
			
			local checkHP = HP.Changed:Connect(function(hp)
				if hp == 0 then return end
				brekthing(item, ToolName)
			end)
			
			brekthing(item, ToolName)
				
			local checkParent
			checkParent = Parent.DescendantRemoving:Connect(function()
				warn(Parent.Parent.Name, "'s star has been removed, disconnecting events.")
				checkHP:Disconnect()
				checkParent:Disconnect()
			end) --prevent memory leaks
			return
		end)()
	end
end

local function GetAndStealResources(PlayerName) --lol u can do this to other players' islands but do that urself smh
	local treeTab, oresTab = {}, {}
	local Star = workspace:FindFirstChild("Star_"..PlayerName).Player
	
	if not Star then
		Star = workspace:WaitForChild("Star_"..PlayerName, 3).Player
		if not Star then warn("Error getting "..PlayerName.."'s star.") return end
	end
	
	for i, v in pairs(Star.Land:GetChildren()) do
		local Trees = v:FindFirstChild("Tree")
		if Trees then
			Trees = Trees:FindFirstChildOfClass("Folder")
			task.wait()
			for i, tree in pairs(Trees:GetChildren()) do
				if tree:IsA("Model") then
					treeTab[#treeTab+1] = tree
				end
			end
			for _, t in pairs(Star.Other.Initial.Tree.Tree_1001:GetChildren()) do --get starter trees too
				
				if t:IsA("Model") then
					treeTab[#treeTab+1] = t
				end
			end
		end
		
		local Ores = v:FindFirstChild("Ore")
		if Ores then
			Ores = Ores:FindFirstChildOfClass("Folder")
			task.wait()
			for i, ore in pairs(Ores:GetChildren()) do
				if ore:IsA("Model") then 
					oresTab[#oresTab+1] = ore
				end
			end	
		end
	end
	RobResource(Star.Land, treeTab, "Axe")
	RobResource(Star.Land, oresTab, "Pickaxe")
	print("Farming star from player: "..PlayerName)
	return
end

print("Gettings stars, this may take a minute.")

if getgenv().Targets then
	if getgenv().Targets == "All" then
		getgenv().Targets = {}
		for i, plr in pairs(game.Players:GetChildren()) do
			 table.insert(getgenv().Targets, plr.Name)
			GetAndStealResources(plr.Name)
		end
		
		game.Players.PlayerAdded:Connect(function(plr)
			local StarLoaded = workspace:WaitForChild("Star_"..plr.Name)
			task.wait(2) --wait for children to load soo
			GetAndStealResources(plr.Name)
		end)
	elseif typeof(getgenv().Targets) == "table" then
		for i, plr in pairs(getgenv().Targets) do
			GetAndStealResources(plr.Name)
		end
	else
		warn('getgenv().Targets must include a table of names or be "All". Farming your own resources for now.')
		GetAndStealResources(LP.Name)
	end
else
	GetAndStealResources(LP.Name)
end

myStar.Unlocker.ChildAdded:Connect(FillUnlocker)
for i, v in pairs(myStar.Unlocker:GetChildren()) do
	FillUnlocker(v)
end

local TabOfMats= {"Plank", "IronPlate",}
for i = 1, #TabOfMats do
	RepStorage.Resources.BuildingRemo:InvokeServer(TabOfMats[i], math.huge)
end

print("gaming chair setup complete")
